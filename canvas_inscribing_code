#importing the required libraries
import numpy as np
from math import sqrt
import pandas as pd
import itertools
from numpy import arange
import matplotlib.pyplot as plt


def inscribe(radius,length,width):
        hyp = 2*radius
        height = round(radius*sqrt(3),3)
    
    #iterations for x coordinates
    
        def seq1(start,length,step):
            y = []
            x = []
            iterations = int(10*length)
            i = 0
            count = start


            while i < iterations:
                y.append(round(count,3))
                if i>0:
                    x.append(round(-count,3))
                if i != iterations:
                    count += step
                i += 1
                if count>((length/2)+step):
                    break

            w =  list(reversed(x))
            w.extend(y)

            x_num = len(w)
            print("Total no. of X-coordinates: ",x_num)

            return w


        #iterations for y coordinates

        def seq2(start, width, step):
            y = []
            x = []
            iterations = 10*width
            i = 0
            count = start

            while i < iterations:
                y.append(round(count,3))
                if i>0:
                    x.append(round(-count,3))
                if i != iterations:
                    count += step
                i += 1
                if count>(width/2):
                    break

            w = list(reversed(y))        
            w.extend(x)

            y_num = len(w)
            print("Total no. of Y-coordinates: ",y_num)

            return w

        #converting the lists of coordinates into a dataframe 
        
        def df_prepare(list1,list2):

            #preparing the dataframe of the coordinates
            df = pd.DataFrame(columns=list1,index=list2)
            df.replace(to_replace=np.NaN,value="",inplace=True)
            df1 = df.copy()

            #placing the values as (x,y) coordinates
            for i in list2:
                for j in list1:
                    df.at[i,j]=[i,j]

            #getting the odd and even indexing value of index seperating b into even indexing and odd indexing of b
            odd_ind = [list2[i] for i in range(0, len(list2)) if i % 2 != 0] 
            even_ind = [list2[i] for i in range(0, len(list2)) if i % 2 == 0]

            #getting the odd and even columns value of index seperating a into even columns and odd columns  of a
            odd_col = [list1[i] for i in range(0, len(list1)) if i % 2 != 0] 
            even_col = [list1[i] for i in range(0, len(list1)) if i % 2 == 0]

            # for placing the even columns
            for i in even_ind:
                for j in even_col:
                    df1.at[i,j]=(j,i)

            # for placing the odd columns    
            for i in odd_ind:
                for j in odd_col:
                    df1.at[i,j]=(j,i) 


            return df1
        
        #counting the total number of circles
        
        def count(dataframe):
            arr = dataframe.to_numpy()
            list1 = arr.tolist()

            final_list=[]
            for i in range(len(list1)):
                final_list.append(list(filter(lambda a: a != '', list1[i])))

            flattened_list = list(itertools.chain.from_iterable(final_list))
            final_num = len(flattened_list)
            print("No. of circles that can be inscribed in "+str(length)+"X"+str(width)+" canvas:",final_num)

            return final_list
        
            
## CREATING A CARTESIAN SYSTEM AND PLOTTING THE IN-CIRCLES ON IT
    
        def graph(lst,length,width):
        #separating the x and y coordinates in different lists
            xlist=[] 
            for i in lst:
                for j in i:
                    xlist.append(j[0])

            ylist=[]
            for i in lst:
                for j in i:
                    ylist.append(j[1])

            # Enter x and y coordinates of points
            xs = xlist
            ys = ylist
            x_bound = (length/2)
            y_bound = width/2


            # Select length of axes and the space between tick labels
            xmin, xmax, ymin, ymax = -(x_bound+round(height)), (x_bound+round(height)), -(y_bound+1), y_bound+1
            ticks_frequency = 1

            # Open a figure
            fig, ax = plt.subplots(figsize=(100, 100))

            # Draw circles with centre at (x,y) and given radius
            for i in range(len(xs)):
                for j in range(len(ys)):
                    if i==j:
                        circle = plt.Circle((xs[i],ys[j]),radius,color='blue',linewidth=1,fill=False)
                        ax.add_patch(circle)

            # Plot the (x,y) points to mark the center of the circles
            ax.scatter(xs, ys,c='red')

            # Set backgroung color for the figure
            ax.set_facecolor('#7FFFD4') 

            # Set identical scales for both axes
            ax.set(xlim=(xmin-1, xmax+1), ylim=(ymin-1, ymax+1), aspect='equal')

            # Set bottom and left spines as x and y axes of coordinate system
            ax.spines['bottom'].set_position('zero')
            ax.spines['left'].set_position('zero')

            # Draw lines to indicate the boundaries of the canvas
            plt.vlines(x = x_bound+height, ymin = -(y_bound), ymax = y_bound, colors = 'purple',label = 'vline_multiple - full height',linestyle = 'dashed')
            plt.vlines(x = -(x_bound+height), ymin = -(y_bound) , ymax = y_bound, colors = 'purple',label = 'vline_multiple - full height',linestyle = 'dashed')
            plt.hlines(y = y_bound, xmin = x_bound+height, xmax = -(x_bound+height), colors = 'purple',label = 'vline_multiple - full height',linestyle = 'dashed')
            plt.hlines(y = -(y_bound), xmin = x_bound+height, xmax = -(x_bound+height), colors = 'purple',label = 'vline_multiple - full height',linestyle = 'dashed')


            # Remove top and right spines
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)

            # Create 'x','y' and 'O' labels 
            ax.set_xlabel('X', size=50, labelpad=-24, x=1.03)
            ax.set_ylabel('Y', size=50, labelpad=-21, y=1.02, rotation=0)
            plt.text(0.499, 0.499, r"$O$", ha='right', va='top',
            transform=ax.transAxes,
                 horizontalalignment='center', fontsize=20)

            # Create custom major ticks to determine position of tick labels
            x_ticks = np.arange(xmin, xmax+1, ticks_frequency)
            y_ticks = np.arange(ymin, ymax+1, ticks_frequency)
            ax.set_xticks(x_ticks[x_ticks != 0])
            ax.set_yticks(y_ticks[y_ticks != 0])

            # Create minor ticks placed at each integer to enable drawing of minor grid
            ax.set_xticks(np.arange(xmin, xmax+1), minor=True)
            ax.set_yticks(np.arange(ymin, ymax+1), minor=True)

            # Draw major and minor grid lines
            ax.grid(which='both', color='grey', linewidth=1, linestyle='-', alpha=0.2)

            # Draw arrows
            arrow_fmt = dict(markersize=4, color='black', clip_on=True)
            ax.plot((1), (0), marker='>', transform=ax.get_yaxis_transform(), **arrow_fmt)
            ax.plot((0), (1), marker='^', transform=ax.get_xaxis_transform(), **arrow_fmt)

            plt.title("IN-CIRCLES PLOTTED IN A CARTESIAN PLANE",fontsize=50,y=-0.02)

            plt.show()

        
        ## passing inputs to the functions defined above
        x_seq = seq1(start = 0, length = length, step = height)
        y_seq = seq2(start = 0, width = width, step = radius)
        df = df_prepare(x_seq,y_seq)
        points = count(df)
        
        # defining the layout variable
        layout = input("Enable layout? ('y'/'n') = ")
        
        if layout == "y" :     #layout to be displayed only if the layout variable has value "y"
            graph(lst = points, length = length, width = width)
        elif layout == "n":
            print("<Layout is disabled>")
